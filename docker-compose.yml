version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      args:
        SERVICE_NAME: api
    ports:
      - "8080:8080"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - postgres
    environment:
      - QUANT_KAFKA_BROKERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - QUANT_DATABASE_HOST=postgres
    volumes:
      - ./config:/app/config
    networks:
      - quant-net

  # Processor Service
  processor:
    build:
      context: .
      args:
        SERVICE_NAME: processor
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      - QUANT_KAFKA_BROKERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - QUANT_DATABASE_HOST=postgres
    volumes:
      - ./config:/app/config
    networks:
      - quant-net

  # Risk Engine Service
  risk-engine:
    build:
      context: .
      args:
        SERVICE_NAME: risk-engine
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - postgres
    environment:
      - QUANT_KAFKA_BROKERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - QUANT_DATABASE_HOST=postgres
    volumes:
      - ./config:/app/config
    networks:
      - quant-net

  # PostgreSQL
  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=quantfinance
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - quant-net

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - quant-net

  # Kafka Brokers
  kafka-1:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - quant-net

  kafka-2:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - quant-net

  kafka-3:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - zookeeper
    ports:
      - "9094:9092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - quant-net

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - quant-net

  # Grafana for visualization
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - quant-net
    volumes:
      - grafana-data:/var/lib/grafana

networks:
  quant-net:
    driver: bridge

volumes:
  postgres-data:
  grafana-data:
